version: '3.4'

services:
  frontendserverdev:
    env_file: .env
    build:
      context: ./
      args: # Environment variables available at build-time
        - http_proxy
        - https_proxy
        - no_proxy
      dockerfile: docker/frontendserverDev/Dockerfile
    volumes:
      - ./certificates:/certificates/
      - ./ReactApp/package.json:/frontendserverAppDev/package.json
      - ./ReactApp/src:/frontendserverAppDev/src
      - ./ReactApp/public:/frontendserverAppDev/public
    restart: always
    network_mode: host
  pvserver:
    env_file: .env
    environment:
      - ALARM_DATABASE=127.0.0.1:27017
      - LOADSAVE_DATABASE=127.0.0.1:27017
    build:
      context: ./
      args: # Environment variables available at build-time
        - http_proxy
        - https_proxy
        - no_proxy
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    tty: true
    stdin_open: true
    volumes:
      - ./certificates:/certificates/
      - ./users:/pvServer/userAuthentication/users
  unsecurestylguidepvserver:
    env_file: .env
    environment:
      - REACT_APP_PyEpicsServerPORT=5001
      - REACT_APP_EnableLogin=false

    build:
      context: ./
      args: # Environment variables available at build-time
        - http_proxy
        - https_proxy
        - no_proxy
      dockerfile: docker/pvserver/Dockerfile
    restart: always
    network_mode: host
    volumes:
      - ./certificates:/certificates/
  demoioc:
    build:
      context: ./
      args: # Environment variables available at build-time
        - http_proxy
        - https_proxy
        - no_proxy
      dockerfile: docker/demoioc/Dockerfile
    tty: true
    stdin_open: true
    restart: always
    network_mode: host
  styleguideserver:
    env_file: .env
    environment:
      - REACT_APP_PyEpicsServerPORT=5001
      - REACT_APP_EnableLogin=false

    build:
      context: ./
      args: # Environment variables available at build-time
        - http_proxy
        - https_proxy
        - no_proxy
      dockerfile: docker/styleguideserver/Dockerfile
    restart: always
    network_mode: host
    volumes:
      - ./certificates:/certificates/
  alarmhandlerserver:
    build:
      context: ./
      dockerfile: docker/alarmHandlerServer/Dockerfile
    hostname: alarmhandlerserver
    restart: always
    network_mode: "host"
    stdin_open: true
    tty: true
    env_file:
      - alarmHandlerServer/alarmHandler.env
  initializeloadsavedb:
    env_file: .env
    environment:
      - LOADSAVE_DATABASE=127.0.0.1:27017
    build:
      context: ./
      
      args: # Environment variables available at build-time
                - http_proxy
                - https_proxy
                - no_proxy
      dockerfile: docker/loadSaveDbInit/Dockerfile
    network_mode: host
    tty: true
    stdin_open: true
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  mongo1:
    image: mongo:4.2.3-bionic
    hostname: mongo1
    restart: always
    ports:
      - 27017:27017
    env_file: .env
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data1:/data/db"
      - "mongo-db-configdb1:/data/configdb"
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "devrs"]

  mongo2:
    image: mongo:4.2.3-bionic
    hostname: mongo2
    restart: always
    depends_on:
      - mongo1
    ports:
      - 27018:27017
    env_file: .env
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data2:/data/db"
      - "mongo-db-configdb2:/data/configdb"
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "devrs"]

  mongo3:
    image: mongo:4.2.3-bionic
    hostname: mongo3
    restart: always
    depends_on:
      - mongo2
    ports:
      - 27019:27017
    env_file: .env
    logging:
      driver: "none"
    volumes:
      - "mongo-db-data3:/data/db"
      - "mongo-db-configdb3:/data/configdb"
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "devrs"]

  mongosetup:
    build:
      context: ./
      dockerfile: docker/mongoSetup/Dockerfile
    hostname: mongosetup
    restart: on-failure
    network_mode: "host"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    stdin_open: true
    tty: true
    env_file:
      - .env
      - alarmHandlerServer/alarmHandler.env

  mongo-express:
    image: mongo-express:0.54.0
    hostname: mongo-express
    restart: always
    ports:
      - 8081:8081
    depends_on:
      - mongosetup
    env_file: .env
    logging:
      driver: "none"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo1

volumes:
  mongo-db-data1:
  mongo-db-configdb1:
  mongo-db-data2:
  mongo-db-configdb2:
  mongo-db-data3:
  mongo-db-configdb3:
  
